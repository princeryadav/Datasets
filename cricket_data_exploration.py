# -*- coding: utf-8 -*-
"""Cricket_Data_Exploration.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KpZSV1jsyat47TDKG5JSaVQ0r9vFo2xa
"""

# Get dataset from githubs and unzip it.
# !wget https://github.com/princeryadav/Datasets/raw/refs/heads/master/cricket_data.zip -O cricket_data.zip

# !unzip cricket_data.zip -d ./sample_data/
#!unzip cricket_data.zip

import pandas as pd
import numpy as np

pd.set_option('display.max_columns',None)

players = pd.read_csv("/content/sample_data/cricket_data.csv", na_values=['-'])
players.shape

players.head(10)

players.columns.to_list()

players = players[['ID',
 'NAME',
 'COUNTRY',
 'Playing role',
 'Batting style',
 'Bowling style',
 'Other',
 'BATTING_Tests_Mat',
 'BATTING_Tests_Inns',
 'BATTING_Tests_NO',
 'BATTING_Tests_Runs',
 'BATTING_Tests_Ave',
 'BATTING_Tests_SR',
 'BATTING_Tests_100',
 'BATTING_Tests_50',
 'BATTING_ODIs_Mat',
 'BATTING_ODIs_Inns',
 'BATTING_ODIs_NO',
 'BATTING_ODIs_Runs',
 'BATTING_ODIs_Ave',
 'BATTING_ODIs_SR',
 'BATTING_ODIs_100',
 'BATTING_ODIs_50',
 'BATTING_T20Is_Mat',
 'BATTING_T20Is_Inns',
 'BATTING_T20Is_NO',
 'BATTING_T20Is_Runs',
 'BATTING_T20Is_Ave',
 'BATTING_T20Is_SR',
 'BATTING_T20Is_100',
 'BATTING_T20Is_50',
 'BOWLING_Tests_Mat',
 'BOWLING_Tests_Inns',
 'BOWLING_Tests_Balls',
 'BOWLING_Tests_Runs',
 'BOWLING_Tests_Wkts',
 'BOWLING_Tests_Ave',
 'BOWLING_Tests_Econ',
 'BOWLING_Tests_SR',
 'BOWLING_Tests_5w',
 'BOWLING_Tests_10',
 'BOWLING_ODIs_Mat',
 'BOWLING_ODIs_Inns',
 'BOWLING_ODIs_Balls',
 'BOWLING_ODIs_Runs',
 'BOWLING_ODIs_Wkts',
 'BOWLING_ODIs_Ave',
 'BOWLING_ODIs_Econ',
 'BOWLING_ODIs_SR',
 'BOWLING_ODIs_5w',
 'BOWLING_ODIs_10',
 'BOWLING_T20Is_Mat',
 'BOWLING_T20Is_Inns',
 'BOWLING_T20Is_Balls',
 'BOWLING_T20Is_Runs',
 'BOWLING_T20Is_Wkts',
 'BOWLING_T20Is_Ave',
 'BOWLING_T20Is_Econ',
 'BOWLING_T20Is_SR',
 'BOWLING_T20Is_5w',
 'BOWLING_T20Is_10',
]]

players.head()

players = players[['ID',
 'NAME',
 'COUNTRY',
 'Playing role',
 'Batting style',
 'Bowling style',
 'BATTING_Tests_Mat',
 'BATTING_Tests_Inns',
 'BATTING_Tests_NO',
 'BATTING_Tests_Runs',
 'BATTING_Tests_Ave',
 'BATTING_Tests_SR',
 'BATTING_Tests_100',
 'BATTING_Tests_50',
 'BOWLING_Tests_Mat',
 'BOWLING_Tests_Inns',
 'BOWLING_Tests_Balls',
 'BOWLING_Tests_Runs',
 'BOWLING_Tests_Wkts',
 'BOWLING_Tests_Ave',
 'BOWLING_Tests_Econ',
 'BOWLING_Tests_SR',
 'BOWLING_Tests_5w',
 'BOWLING_Tests_10',
]]

players.isna().sum()

players[players['Playing role'].notna()]

allrounder_players=players[(players['Playing role']=='Allrounder') & (players['BATTING_Tests_Inns'].notna()) & (players['BATTING_Tests_Mat']>10) ]
allrounder_players.shape

allrounder_players.head()

# allrounder_players.hist(bins=90,figsize=(20,20))

players.dtypes

# pd.to_numeric(players['BOWLING_Tests_Balls'])

players.iloc[30916]

players['BOWLING_Tests_Balls']=players['BOWLING_Tests_Balls'].str.replace(r'\W+', '', regex=True)

players['BOWLING_Tests_Balls']

players.iloc[30916]

pd.to_numeric(players['BOWLING_Tests_Balls'])

pd.to_numeric(players['BOWLING_Tests_Balls'])

# allrounder_players.hist(bins=60,figsize=(20,20))

players.dtypes

import re

players = players.map(lambda x: re.sub(r'[^a-zA-Z0-9\s]', '', x) if isinstance(x, str) else x)

players.dtypes

players['BOWLING_Tests_Balls'] = pd.to_numeric(players['BOWLING_Tests_Balls'])

players.dtypes

players['BOWLING_Tests_SR']=pd.to_numeric(players['BOWLING_Tests_SR'])

players.dtypes

players['BOWLING_Tests_Econ'] = pd.to_numeric(players['BOWLING_Tests_Econ'])

players.dtypes

# players.hist(bins=60,figsize=(20,20))

players.columns

players=players[['ID', 'NAME', 'COUNTRY', 'Playing role', 'Batting style',
       'Bowling style', 'BATTING_Tests_Mat', 'BATTING_Tests_Inns', 'BATTING_Tests_Runs', 'BATTING_Tests_Ave',
       'BATTING_Tests_SR', 'BATTING_Tests_100', 'BATTING_Tests_50',
       'BOWLING_Tests_Mat', 'BOWLING_Tests_Inns', 'BOWLING_Tests_Balls',
       'BOWLING_Tests_Wkts', 'BOWLING_Tests_Ave',
       'BOWLING_Tests_Econ', 'BOWLING_Tests_SR', 'BOWLING_Tests_5w',
       'BOWLING_Tests_10']]

players

# pd.to_numeric(players['ID'])

players['Playing role'].value_counts()

players['ID'].iloc[69909]

players.shape

import re

# Extract first numeric value from each entry
players['ID_clean'] = players['ID'].apply(lambda x: re.findall(r'\d+\.?\d*', str(x)))

# Convert to float (or int) if a number was found
players['ID_clean'] = players['ID_clean'].apply(lambda x: float(x[0]) if x else None)

players.dtypes

players.columns

players=players[['ID_clean', 'Playing role', 'BATTING_Tests_Mat', 'BATTING_Tests_Inns',
       'BATTING_Tests_Runs', 'BATTING_Tests_Ave', 'BATTING_Tests_SR',
       'BATTING_Tests_100', 'BATTING_Tests_50', 'BOWLING_Tests_Mat',
       'BOWLING_Tests_Inns', 'BOWLING_Tests_Balls', 'BOWLING_Tests_Wkts',
       'BOWLING_Tests_Ave', 'BOWLING_Tests_Econ', 'BOWLING_Tests_SR',
       'BOWLING_Tests_5w', 'BOWLING_Tests_10']]

players.shape

players.dtypes

players.columns

# players.hist(bins=60,figsize=(20,20))

players.shape

players.columns

players

# players = players[players['BATTING_Tests_Mat']==87]

players = players[players['Playing role'].notna()]
players

X_players = players[['ID_clean','BATTING_Tests_Mat', 'BATTING_Tests_Inns',
       'BATTING_Tests_Runs', 'BATTING_Tests_Ave', 'BATTING_Tests_SR',
       'BATTING_Tests_100', 'BATTING_Tests_50', 'BOWLING_Tests_Mat',
       'BOWLING_Tests_Inns', 'BOWLING_Tests_Balls', 'BOWLING_Tests_Wkts',
       'BOWLING_Tests_Ave', 'BOWLING_Tests_Econ', 'BOWLING_Tests_SR',
       'BOWLING_Tests_5w', 'BOWLING_Tests_10']]
y_players = players[['Playing role']]

# X_test = players[players['Playing role']=='Allrounder']
# X_test
X_test = X_players[X_players['ID_clean']==53118.0]
X_test

print(X_players.shape)
print(y_players.shape)

# from sklearn.impute import SimpleImputer

# imputer = SimpleImputer(strategy='mean')  # or 'median', 'most_frequent'
# X_players = imputer.fit_transform(x_players)
# y_players = imputer.fit_transform(y_players)

X_players

from sklearn.tree import DecisionTreeClassifier
clf = DecisionTreeClassifier().fit(X_players,y_players)

y_pred = clf.predict(X_players)
y_pred

y_pred = clf.predict(X_test)
y_pred